// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STAFF)
  isApproved    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  careRecords   CareRecord[]
  photos        Photo[]
  sentMessages  Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  residentFamily ResidentFamily[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resident {
  id        String   @id @default(cuid())
  name      String
  birthday  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  careRecords CareRecord[]
  photos      Photo[]
  messages    Message[]
  family      ResidentFamily[]
}

model CareRecord {
  id         String   @id @default(cuid())
  residentId String
  staffId    String
  date       DateTime
  meal       String?  @db.Text
  bath       String?  @db.Text
  toilet     String?  @db.Text
  medicine   String?  @db.Text
  vital      String?  @db.Text
  note       String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  resident Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
  staff    User     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Photo {
  id         String   @id @default(cuid())
  residentId String
  userId     String
  url        String
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  resident Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  residentId String
  content    String   @db.Text
  isRead     Boolean  @default(false)
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  resident Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
}

model ResidentFamily {
  id         String   @id @default(cuid())
  residentId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  resident Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([residentId, userId])
}

enum UserRole {
  STAFF
  FAMILY
}
